name: CI
on: [pull_request, push]
env:
  RUSTFLAGS: "-C debuginfo=0 -D warnings"
jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Install OBS (ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo add-apt-repository ppa:obsproject/obs-studio
          sudo apt-get -y install libx11-dev obs-studio
      - name: Install OBS (macos)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew update
          brew install obs
      - name: Install OBS (windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          choco install -y --no-progress llvm obs-studio
          echo "LIBCLANG_PATH=C:\Program Files\LLVM\lib" >> $env:GITHUB_ENV
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Configure cache
        uses: Swatinem/rust-cache@v2
      - name: Build
        if: startsWith(matrix.os, 'windows') != true
        run: cargo build
  miri:
    name: Miri
    runs-on: ubuntu-latest
    steps:
      - name: Install OBS
        run: |
          sudo add-apt-repository ppa:obsproject/obs-studio
          sudo apt-get -y install libx11-dev obs-studio
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2024-12-01
          components: miri
      - name: Configure cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-directories: ~/.cache/miri
      - name: Miri setup
        run: cargo miri setup
      - name: Miri test
        run: cargo miri test --package obs
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Install OBS
        run: |
          sudo add-apt-repository ppa:obsproject/obs-studio
          sudo apt-get -y install libx11-dev obs-studio
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Setup Rust (nightly)
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - name: Run rustfmt
        run: cargo fmt -- --check
      - name: Setup Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Configure cache
        uses: Swatinem/rust-cache@v2
      - name: Run clippy
        run: cargo clippy -- -D warnings
  cargo-deny:
    name: Cargo Deny
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources
    continue-on-error: ${{ matrix.checks == 'advisories' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Check ${{ matrix.checks }}
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          command: check ${{ matrix.checks }}
