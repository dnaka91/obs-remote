syntax = "proto3";

package obs_remote.streaming;

import "common.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

// API functions related to streaming.
service Streaming {
  // Get current streaming and recording status.
  rpc Status(google.protobuf.Empty)
      returns (StatusReply);
  // Toggle streaming on or off (depending on the current stream state).
  rpc Toggle(google.protobuf.Empty) returns (google.protobuf.Empty);
  // Start streaming. Will return an `error` if streaming is already active.
  rpc Start(StartRequest) returns (google.protobuf.Empty);
  // Stop streaming. Will return an `error` if streaming is not active.
  rpc Stop(google.protobuf.Empty) returns (google.protobuf.Empty);
  // Sets one or more attributes of the current streaming server settings. Any
  // options not passed will remain unchanged. Returns the updated settings in
  // response. If 'type' is different than the current streaming service type,
  // all settings are required. Returns the full settings of the stream (the
  // same as GetStreamSettings).
  rpc SetSettings(SetSettingsRequest)
      returns (google.protobuf.Empty);
  // Get the current streaming server settings.
  rpc GetSettings(google.protobuf.Empty) returns (GetSettingsReply);
  // Save the current streaming server settings to disk.
  rpc SaveSettings(google.protobuf.Empty) returns (google.protobuf.Empty);
  // Send the provided text as embedded CEA-608 caption data.
  rpc SendCaptions(SendCaptionsRequest) returns (google.protobuf.Empty);
}

message StatusReply {
  // Current streaming status.
  bool streaming = 1;
  // Current recording status.
  bool recording = 2;
  // If recording is paused.
  bool recording_paused = 3;
  // Always false. Retrocompatibility with OBSRemote.
  bool preview_only = 4;
  // Time elapsed since streaming started (only present if currently streaming).
  common.Timecode stream_timecode = 5;
  // Time elapsed since recording started (only present if currently recording).
  common.Timecode rec_timecode = 6;

}

message StartRequest {
  // Special stream configuration. Please note: these won't be saved to OBS'
  // configuration.
  Stream stream = 1;

  message Stream {
    // If specified ensures the type of stream matches the given type (usually
    // 'rtmp_custom' or 'rtmp_common'). If the currently configured stream type
    // does not match the given stream type, all settings must be specified in
    // the `settings` object or an error will occur when starting the stream.
    StreamType ty = 1;
    // Adds the given object parameters as encoded query string parameters to
    // the 'key' of the RTMP stream. Used to pass data to the RTMP service about
    // the streaming. May be any String, Numeric, or Boolean field.
    google.protobuf.StringValue metadata = 2;
    // Settings for the stream.
    StreamSettings settings = 3;
  }
}

message SetSettingsRequest {
  // The type of streaming service configuration, usually `rtmp_custom` or
  // `rtmp_common`.
  StreamType ty = 1;
  // The actual settings of the stream.
  StreamSettings settings = 2;
  // Persist the settings to disk.
  bool save = 3;
}

message GetSettingsReply {
  // The type of streaming service configuration. Possible values: `rtmp_custom`
  // or `rtmp_common`.
  StreamType ty = 1;
  // Stream settings object.
  StreamSettings settings = 2;
}

message SendCaptionsRequest {
  // Captions text.
  string text = 1;
}

// The type of streaming for service configurations.
enum StreamType {
  // Common RTMP configuration.
  RTMP_COMMON = 0;
  // Customized RTMP streaming.
  RTMP_CUSTOM = 1;
}

message StreamSettings {
  // The publish URL.
  google.protobuf.StringValue server = 1;
  // The publish key of the stream.
  google.protobuf.StringValue key = 2;
  // Indicates whether authentication should be used when connecting to the
  // streaming server.
  google.protobuf.BoolValue use_auth = 3;
  // If authentication is enabled, the username for the streaming server.
  // Ignored if `use_auth` is not set to `true`.
  google.protobuf.StringValue username = 4;
  // If authentication is enabled, the password for the streaming server.
  // Ignored if `use_auth` is not set to `true`.
  google.protobuf.StringValue password = 5;
}
