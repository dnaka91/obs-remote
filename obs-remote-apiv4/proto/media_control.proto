syntax = "proto3";

package obs_remote.media_control;

import "common.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

// API functions related to media control.
service MediaControl {
  // Pause or play a media source. Supports ffmpeg and vlc media sources (as of
  // OBS v25.0.8).
  rpc Toggle(ToggleRequest) returns (google.protobuf.Empty);
  // Restart a media source. Supports ffmpeg and vlc media sources (as of OBS
  // v25.0.8).
  rpc Restart(Identifier) returns (google.protobuf.Empty);
  // Stop a media source. Supports ffmpeg and vlc media sources (as of OBS
  // v25.0.8).
  rpc Stop(Identifier) returns (google.protobuf.Empty);
  // Skip to the next media item in the playlist. Supports only vlc media source
  // (as of OBS v25.0.8).
  rpc Next(Identifier) returns (google.protobuf.Empty);
  // Go to the previous media item in the playlist. Supports only vlc media
  // source (as of OBS v25.0.8).
  rpc Previous(Identifier) returns (google.protobuf.Empty);
  // Get the length of media in milliseconds. Supports ffmpeg and vlc media
  // sources (as of OBS v25.0.8).
  //
  // Note: For some reason, for the first 5 or so seconds that the media is
  // playing, the total duration can be off by upwards of 50ms.
  rpc Duration(Identifier) returns (DurationReply);
  // Get the current timestamp of media in milliseconds. Supports ffmpeg and vlc
  // media sources (as of OBS v25.0.8).
  rpc GetTime(Identifier) returns (GetTimeReply);
  // Set the timestamp of a media source. Supports ffmpeg and vlc media sources
  // (as of OBS v25.0.8).
  rpc SetTime(SetTimeRequest) returns (google.protobuf.Empty);
  // Scrub media using a supplied offset. Supports ffmpeg and vlc media sources
  // (as of OBS v25.0.8).
  //
  // Note: Due to processing/network delays, this request is not perfect. The
  // processing rate of this request has also not been tested.
  rpc Scrub(ScrubRequest) returns (google.protobuf.Empty);
  // Get the current playing state of a media source. Supports ffmpeg and vlc
  // media sources (as of OBS v25.0.8).
  rpc State(Identifier) returns (StateReply);
}

message ToggleRequest {
  // Source name.
  string name = 1;
  // Whether to pause or play the source. `false` for play, `true` for pause.
  google.protobuf.BoolValue play_pause = 2;
}

message Identifier {
  // Source name.
  string name = 1;
}

message DurationReply {
  // The total length of media in milliseconds.
  google.protobuf.Duration duration = 1;
}

message GetTimeReply {
  // The time in milliseconds since the start of the media.
  google.protobuf.Duration timestamp = 1;
}

message SetTimeRequest {
  // Source name.
  string name = 1;
  // Milliseconds to set the timestamp to.
  google.protobuf.Duration timestamp = 2;
}

message ScrubRequest {
  // Source name.
  string name = 1;
  // Millisecond offset (positive or negative) to offset the current media
  // position.
  google.protobuf.Duration offset = 2;
}

message StateReply {
  // The media state of the provided source.
  common.MediaState state = 1;
}
