syntax = "proto3";

package obs_remote.sources;

import "common.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

// API functions related to sources.
service Sources {
  // List the media state of all media sources (vlc and media source).
  rpc GetMediaSourcesList(google.protobuf.Empty)
      returns (GetMediaSourcesListReply);
  // Create a source and add it as a scene item to a scene.
  rpc Create(CreateRequest) returns (CreateReply);
  // List all sources available in the running OBS instance.
  rpc GetSourcesList(google.protobuf.Empty) returns (GetSourcesListReply);
  // Get a list of all available sources types.
  rpc ListTypes(ListTypesRequest) returns (ListTypesReply);
  // Get the volume of the specified source. Default response uses mul format,
  // NOT SLIDER PERCENTAGE.
  rpc GetVolume(GetVolumeRequest) returns (GetVolumeReply);
  // Set the volume of the specified source. Default request format uses mul,
  // NOT SLIDER PERCENTAGE.
  rpc SetVolume(SetVolumeRequest) returns (google.protobuf.Empty);
  // Get the mute status of a specified source.
  rpc GetMute(GetMuteRequest) returns (GetMuteReply);
  // Sets the mute status of a specified source.
  rpc SetMute(SetMuteRequest) returns (google.protobuf.Empty);
  // Inverts the mute status of a specified source.
  rpc ToggleMute(ToggleMuteRequest) returns (google.protobuf.Empty);
  // Get the audio's active status of a specified source.
  rpc GetAudioActive(GetAudioActiveRequest) returns (GetAudioActiveReply);
  // Rename an existing source.
  //
  // Note: If the new name already exists as a source, obs-websocket will return
  // an error.
  rpc SetName(SetNameRequest) returns (google.protobuf.Empty);
  // Set the audio sync offset of a specified source.
  rpc SetSyncOffset(SetSyncOffsetRequest) returns (google.protobuf.Empty);
  // Get the audio sync offset of a specified source.
  rpc GetSyncOffset(GetSyncOffsetRequest) returns (GetSyncOffsetReply);
  // Get settings of the specified source.
  rpc GetSettings(GetSettingsRequest) returns (SettingsReply);
  // Set settings of the specified source.
  rpc SetSettings(SetSettingsRequest) returns (SettingsReply);
  // Get the current properties of a Text GDI Plus source.
  rpc GetTextGdiPlusProperties(GetTextGdiPlusPropertiesRequest)
      returns (GetTextGdiPlusPropertiesReply);
  // Set the current properties of a Text GDI Plus source.
  rpc SetTextGdiPlusProperties(SetTextGdiPlusPropertiesRequest)
      returns (google.protobuf.Empty);
  // Get the current properties of a Text Freetype 2 source.
  rpc GetTextFreetype2Properties(GetTextFreetype2PropertiesRequest)
      returns (GetTextFreetype2PropertiesReply);
  // Set the current properties of a Text Freetype 2 source.
  rpc SetTextFreetype2Properties(SetTextFreetype2PropertiesRequest)
      returns (google.protobuf.Empty);
  // Get configured special sources like Desktop Audio and Mic/Aux sources.
  rpc GetSpecialSources(google.protobuf.Empty) returns (GetSpecialSourcesReply);
  // List filters applied to a source.
  rpc GetSourceFilters(GetSourceFiltersRequest) returns (GetSourceFiltersReply);
  // List filters applied to a source.
  rpc GetSourceFilterInfo(GetSourceFilterInfoRequest)
      returns (GetSourceFilterInfoReply);
  // Add a new filter to a source.
  rpc AddFilterToSource(AddFilterToSourceRequest)
      returns (google.protobuf.Empty);
  // Remove a filter from a source.
  rpc RemoveFilterFromSource(RemoveFilterFromSourceRequest)
      returns (google.protobuf.Empty);
  // Move a filter in the chain (absolute index positioning).
  rpc ReorderSourceFilter(ReorderSourceFilterRequest)
      returns (google.protobuf.Empty);
  // Move a filter in the chain (relative positioning).
  rpc MoveSourceFilter(MoveSourceFilterRequest) returns (google.protobuf.Empty);
  // Update settings of a filter.
  rpc SetSourceFilterSettings(SetSourceFilterSettingsRequest)
      returns (google.protobuf.Empty);
  // Change the visibility/enabled state of a filter.
  rpc SetSourceFilterVisibility(SetSourceFilterVisibilityRequest)
      returns (google.protobuf.Empty);
  // Get the audio monitoring type of the specified source.
  rpc GetAudioMonitorType(GetAudioMonitorTypeRequest)
      returns (GetAudioMonitorTypeReply);
  // Set the audio monitoring type of the specified source.
  rpc SetAudioMonitorType(SetAudioMonitorTypeRequest)
      returns (google.protobuf.Empty);
  // Get the default settings for a given source type.
  rpc GetDefaultSettings(GetDefaultSettingsRequest)
      returns (GetDefaultSettingsReply);
  // At least `embed_picture_format` or `save_to_file_path` must be specified.
  //
  // Clients can sepcify `width` and `height` parameters to receive scaled
  // pictures. Aspect ratio is preserved if only one of these two parameters is
  // specified.
  rpc TakeSourceScreenshot(TakeSourceScreenshotRequest)
      returns (TakeSourceScreenshotReply);
  // Refreshes the specified browser source.
  rpc RefreshBrowserSource(RefreshBrowserSourceRequest)
      returns (google.protobuf.Empty);
}

message GetMediaSourcesListReply {
  // Array of sources.
  repeated MediaSource media_sources = 1;

  message MediaSource {
    // Unique source name.
    string source_name = 1;
    // Unique source internal type (a.k.a `ffmpeg_source` or `vlc_source`).
    string source_kind = 2;
    // The current state of media for that source.
    common.MediaState media_state = 3;
  }
}

message CreateRequest {
  // Source name.
  string name = 1;
  // Source kind, Eg. `vlc_source`.
  string kind = 2;
  // Source settings data.
  string settings = 3;
  // Scene to add the new source to.
  string scene_name = 4;
  // Set the created SceneItem as visible or not. Defaults to true.
  bool set_visible = 5;
}

message CreateReply {
  // ID of the scene item in the scene.
  int64 item_id = 1;
}

message GetSourcesListReply {
  // Array of sources.
  repeated Source sources = 1;

  message Source {
    // Unique source name.
    string name = 1;
    // Non-unique source internal type (a.k.a kind).
    string type_id = 2;
    // Source type.
    string ty = 3;
  }
}

message ListTypesRequest {
  // Filter by a specific source type or pass `UNKNOWN` to get all.
  common.SourceType ty = 1;
}

message ListTypesReply {
  // Array of source types.
  repeated SourceType types = 1;

  message SourceType {
    // Non-unique internal source type ID.
    string type_id = 1;
    // Display name of the source type.
    string display_name = 2;
    // Type. Value is one of the following: "input", "filter", "transition" or
    // "other".
    common.SourceType ty = 3;
    // Default settings of this source type.
    string default_settings = 4;
    // Source type capabilities.
    Capabilities caps = 5;

    message Capabilities {
      // True if source of this type provide frames asynchronously.
      bool is_async = 1;
      // True if sources of this type provide video.
      bool has_video = 2;
      // True if sources of this type provide audio.
      bool has_audio = 3;
      // True if interaction with this sources of this type is possible.
      bool can_interact = 4;
      // True if sources of this type composite one or more sub-sources.
      bool is_composite = 5;
      // True if sources of this type should not be fully duplicated.
      bool do_not_duplicate = 6;
      // True if sources of this type may cause a feedback loop if it's audio is
      // monitored and shouldn't be.
      bool do_not_self_monitor = 7;
    }
  }
}

message GetVolumeRequest {
  // Source name.
  string source = 1;
  // Output volume in decibels of attenuation instead of amplitude/mul.
  bool use_decibel = 2;
}

message GetVolumeReply {
  // Source name.
  string name = 1;
  // Volume of the source. Between `0.0` and `20.0` if using mul, under `26.0`
  // if using dB.
  double volume = 2;
  // Indicates whether the source is muted.
  bool muted = 3;
}

message SetVolumeRequest {
  // Source name.
  string source = 1;
  // Desired volume. Must be between `0.0` and `20.0` for mul, and under 26.0
  // for dB. OBS will interpret dB values under -100.0 as Inf. Note: The OBS
  // volume sliders only reach a maximum of 1.0mul/0.0dB, however OBS actually
  // supports larger values.
  double volume = 2;
  // Interpret `volume` data as decibels instead of amplitude/mul.
  bool use_decibel = 3;
}

message GetMuteRequest {
  // Source name.
  string source = 1;
}

message GetMuteReply {
  // Source name.
  string name = 1;
  // Mute status of the source.
  bool muted = 2;
}

message SetMuteRequest {
  // Source name.
  string source = 1;
  // Desired mute status.
  bool mute = 2;
}

message ToggleMuteRequest {
  // Source name.
  string source = 1;
}

message GetAudioActiveRequest {
  // Source name.
  string source_name = 1;
}

message GetAudioActiveReply {
  // Audio active status of the source.
  bool audio_active = 1;
}

message SetNameRequest {
  // Source name.
  string name = 1;
  // New source name.
  string new_name = 2;
}

message SetSyncOffsetRequest {
  // Source name.
  string source = 1;
  // The desired audio sync offset (in nanoseconds).
  google.protobuf.Duration offset = 2;
}

message GetSyncOffsetRequest {
  // Source name.
  string source = 1;
}

message GetSyncOffsetReply {
  // Source name.
  string name = 1;
  // The audio sync offset (in nanoseconds).
  google.protobuf.Duration offset = 2;
}

message GetSettingsRequest {
  // Source name.
  string name = 1;
  // Type of the specified source. Useful for type-checking if you expect a
  // specific settings schema.
  google.protobuf.StringValue ty = 2;
}

message SetSettingsRequest {
  // Source name.
  string name = 1;
  // Type of the specified source. Useful for type-checking to avoid settings a
  // set of settings incompatible with the actual source's type.
  google.protobuf.StringValue ty = 2;
  // Source settings (varies between source types, may require some probing
  // around).
  string settings = 3;
}

message SettingsReply {
  // Source name.
  string name = 1;
  // Type of the specified source.
  string ty = 2;
  // Source settings (varies between source types, may require some probing
  // around).
  string settings = 3;
}

message GetTextGdiPlusPropertiesRequest {
  // Source name.
  string source = 1;
}

message GetTextGdiPlusPropertiesReply {
  // Source name.
  string source = 1;
  // Text Alignment ("left", "center", "right").
  Align align = 2;
  // Background color.
  uint32 bk_color = 3;
  // Background opacity (0-100).
  uint32 bk_opacity = 4;
  // Chat log.
  bool chatlog = 5;
  // Chat log lines.
  uint64 chatlog_lines = 6;
  // Text color.
  uint32 color = 7;
  // Extents wrap.
  bool extents = 8;
  // Extents cx.
  int64 extents_cx = 9;
  // Extents cy.
  int64 extents_cy = 10;
  // File path name.
  string file = 11;
  // Read text from the specified file.
  bool read_from_file = 12;
  // Holds data for the font.
  Font font = 13;
  // Gradient enabled.
  bool gradient = 14;
  // Gradient color.
  uint32 gradient_color = 15;
  // Gradient direction.
  float gradient_dir = 16;
  // Gradient opacity (0-100).
  uint32 gradient_opacity = 17;
  // Outline.
  bool outline = 18;
  // Outline color.
  uint32 outline_color = 19;
  // Outline size.
  uint64 outline_size = 20;
  // Outline opacity (0-100).
  uint32 outline_opacity = 21;
  // Text content to be displayed.
  string text = 22;
  // Text vertical alignment ("top", "center", "bottom").
  Valign valign = 23;
  // Vertical text enabled.
  bool vertical = 24;
}

message SetTextGdiPlusPropertiesRequest {
  // Name of the source.
  string source = 1;
  // Text Alignment ("left", "center", "right").
  Align align = 2;
  // Background color.
  google.protobuf.UInt32Value bk_color = 3;
  // Background opacity (0-100).
  google.protobuf.UInt32Value bk_opacity = 4;
  // Chat log.
  google.protobuf.BoolValue chatlog = 5;
  // Chat log lines.
  google.protobuf.UInt64Value chatlog_lines = 6;
  // Text color.
  google.protobuf.UInt32Value color = 7;
  // Extents wrap.
  google.protobuf.BoolValue extents = 8;
  // Extents cx.
  google.protobuf.Int64Value extents_cx = 9;
  // Extents cy.
  google.protobuf.Int64Value extents_cy = 10;
  // File path name.
  google.protobuf.StringValue file = 11;
  // Read text from the specified file.
  google.protobuf.BoolValue read_from_file = 12;
  // Holds data for the font.
  Font font = 13;
  // Gradient enabled.
  google.protobuf.BoolValue gradient = 14;
  // Gradient color.
  google.protobuf.UInt32Value gradient_color = 15;
  // Gradient direction.
  google.protobuf.FloatValue gradient_dir = 16;
  // Gradient opacity (0-100).
  google.protobuf.UInt32Value gradient_opacity = 17;
  // Outline.
  google.protobuf.BoolValue outline = 18;
  // Outline color.
  google.protobuf.UInt32Value outline_color = 19;
  // Outline size.
  google.protobuf.UInt64Value outline_size = 20;
  // Outline opacity (0-100).
  google.protobuf.UInt32Value outline_opacity = 21;
  // Text content to be displayed.
  google.protobuf.StringValue text = 22;
  // Text vertical alignment ("top", "center", "bottom").
  Valign valign = 23;
  // Vertical text enabled.
  google.protobuf.BoolValue vertical = 24;
  // Visibility of the scene item.
  google.protobuf.BoolValue render = 25;
}

message GetTextFreetype2PropertiesRequest {
  // Source name.
  string source = 1;
}

message GetTextFreetype2PropertiesReply {
  // Source name.
  string source = 1;
  // Gradient top color.
  google.protobuf.UInt32Value color1 = 2;
  // Gradient bottom color.
  google.protobuf.UInt32Value color2 = 3;
  // Custom width (0 to disable).
  google.protobuf.UInt32Value custom_width = 4;
  // Drop shadow.
  bool drop_shadow = 5;
  // Holds data for the font.
  Font font = 6;
  // Read text from the specified file.
  bool from_file = 7;
  // Chat log.
  bool log_mode = 8;
  // Outline.
  bool outline = 9;
  // Text content to be displayed.
  string text = 10;
  // File path.
  google.protobuf.StringValue text_file = 11;
  // Word wrap.
  bool word_wrap = 12;
}

message SetTextFreetype2PropertiesRequest {
  // Source name.
  string source = 1;
  // Gradient top color.
  google.protobuf.UInt32Value color1 = 2;
  // Gradient bottom color.
  google.protobuf.UInt32Value color2 = 3;
  // Custom width (0 to disable).
  google.protobuf.UInt32Value custom_width = 4;
  // Drop shadow.
  google.protobuf.BoolValue drop_shadow = 5;
  // Holds data for the font.
  Font font = 6;
  // Read text from the specified file.
  google.protobuf.BoolValue from_file = 7;
  // Chat log.
  google.protobuf.BoolValue log_mode = 8;
  // Outline.
  google.protobuf.BoolValue outline = 9;
  // Text content to be displayed.
  google.protobuf.StringValue text = 10;
  // File path.
  google.protobuf.StringValue text_file = 11;
  // Word wrap.
  google.protobuf.BoolValue word_wrap = 12;
}

message GetSpecialSourcesReply {
  // Name of the first Desktop Audio capture source.
  google.protobuf.StringValue desktop_1 = 1;
  // Name of the second Desktop Audio capture source.
  google.protobuf.StringValue desktop_2 = 2;
  // Name of the first Mic/Aux input source.
  google.protobuf.StringValue mic_1 = 3;
  // Name of the second Mic/Aux input source.
  google.protobuf.StringValue mic_2 = 4;
  // Name of the third Mic/Aux input source.
  google.protobuf.StringValue mic_3 = 5;
}

message GetSourceFiltersRequest {
  // Source name.
  string source_name = 1;
}

message GetSourceFiltersReply {
  // List of filters for the specified source.
  repeated SourceFilter filters = 1;

  message SourceFilter {
    // Filter status (enabled or not).
    bool enabled = 1;
    // Filter type.
    string ty = 2;
    // Filter name.
    string name = 3;
    // Filter settings.
    string settings = 4;
  }
}

message GetSourceFilterInfoRequest {
  // Source name.
  string source_name = 1;
  // Source filter name.
  string filter_name = 2;
}

message GetSourceFilterInfoReply {
  // Filter status (enabled or not).
  bool enabled = 1;
  // Filter type.
  string ty = 2;
  // Filter name.
  string name = 3;
  // Filter settings.
  string settings = 4;
}

message AddFilterToSourceRequest {
  // Name of the source on which the filter is added.
  string source_name = 1;
  // Name of the new filter.
  string filter_name = 2;
  // Filter type.
  string filter_type = 3;
  // Filter settings.
  string filter_settings = 4;
}

message RemoveFilterFromSourceRequest {
  // Name of the source from which the specified filter is removed.
  string source_name = 1;
  // Name of the filter to remove.
  string filter_name = 2;
}

message ReorderSourceFilterRequest {
  // Name of the source to which the filter belongs.
  string source_name = 1;
  // Name of the filter to reorder.
  string filter_name = 2;
  // Desired position of the filter in the chain.
  uint32 new_index = 3;
}

message MoveSourceFilterRequest {
  // Name of the source to which the filter belongs.
  string source_name = 1;
  // Name of the filter to reorder.
  string filter_name = 2;
  // How to move the filter around in the source's filter chain. Either "up",
  // "down", "top" or "bottom".
  MovementType movement_type = 3;

  enum MovementType {
    // No value specified.
    MOVEMENT_TYPE_UNSPECIFIED = 0;
    // Move up by one position.
    MOVEMENT_TYPE_UP = 1;
    // Move down by one position.
    MOVEMENT_TYPE_DOWN = 2;
    // Move to the very top.
    MOVEMENT_TYPE_TOP = 3;
    // Move to the very bottom.
    MOVEMENT_TYPE_BOTTOM = 4;
  }
}

message SetSourceFilterSettingsRequest {
  // Name of the source to which the filter belongs.
  string source_name = 1;
  // Name of the filter to reconfigure.
  string filter_name = 2;
  // New settings. These will be merged to the current filter settings.
  string filter_settings = 3;
}

message SetSourceFilterVisibilityRequest {
  // Source name.
  string source_name = 1;
  // Source filter name.
  string filter_name = 2;
  // New filter state.
  bool filter_enabled = 3;
}

message GetAudioMonitorTypeRequest {
  // Source name.
  string source_name = 1;
}

message GetAudioMonitorTypeReply {
  // The monitor type in use.
  MonitorType monitor_type = 1;
}

message SetAudioMonitorTypeRequest {
  // Source name.
  string source_name = 1;
  // The monitor type to use.
  MonitorType monitor_type = 2;
}

message GetDefaultSettingsRequest {
  // Source kind. Also called "source id" in libobs terminology.
  string kind = 1;
}

message GetDefaultSettingsReply {
  // Source kind. Same value as the `source_kind` parameter.
  string kind = 1;
  // Settings object for source.
  string settings = 2;
}

message TakeSourceScreenshotRequest {
  // Source name.
  //
  // Note: Since scenes are also sources, you can also provide a scene name. If
  // not provided, the currently active scene is used.
  google.protobuf.StringValue source_name = 1;
  // Format of the Data URI encoded picture. Can be "png", "jpg", "jpeg" or
  // "bmp" (or any other value supported by Qt's Image module).
  google.protobuf.StringValue embed_picture_format = 2;
  // Full file path (file extension included) where the captured image is to be
  // saved. Can be in a format different from `embed_picture_format`. Can be a
  // relative path.
  google.protobuf.StringValue save_to_file_path = 3;
  // Format to save the image file as (one of the values provided in the
  // `supported_image_export_formats` response field of `get_version`. If not
  // specified, tries to guess based on file extension.
  google.protobuf.StringValue file_format = 4;
  // Compression ratio between -1 and 100 to write the image with. -1 is
  // automatic, 1 is smallest file/most compression, 100 is largest file/least
  // compression. Varies with image type.
  google.protobuf.Int32Value compress_quality = 5;
  // Screenshot width. Defaults to the source's base width.
  google.protobuf.UInt32Value width = 6;
  // Screenshot height. Defaults to the source's base height.
  google.protobuf.UInt32Value height = 7;
}

message TakeSourceScreenshotReply {
  // Source name.
  string source_name = 1;
  // Image Data URI (if `embed_picture_format` was specified in the request).
  google.protobuf.StringValue img = 2;
  // Absolute path to the saved image file (if `save_to_file_path` was specified
  // in the request).
  google.protobuf.StringValue image_file = 3;
}

message RefreshBrowserSourceRequest {
  // Source name.
  string source_name = 1;
}

// Text alignment used for GDI+ text properties.
enum Align {
  // No value specified.
  ALIGN_UNSPECIFIED = 0;
  // Default alignment.
  ALIGN_DEFAULT = 1;
  // Align to the left.
  ALIGN_LEFT = 2;
  // Center the text in the middle (horizontally).
  ALIGN_CENTER = 3;
  // Align to the right.
  ALIGN_RIGHT = 4;
}

// Vertical text alignment use for GDI+ text properties.
enum Valign {
  // No value specified.
  VALIGN_UNSPECIFIED = 0;
  // Default vertical alignment.
  VALIGN_DEFAULT = 1;
  // Align to the top.
  VALIGN_TOP = 2;
  // Center the text in the middle (vertically).
  VALIGN_CENTER = 3;
  // Align to the bottom.
  VALIGN_BOTTOM = 4;
}

message Font {
  // Font face.
  string face = 1;
  // Font text styling flag. `Bold=1, Italic=2, Bold Italic=3, Underline=5,
  // Strikeout=8`.
  FontFlags flags = 2;
  // Font text size.
  uint32 size = 3;
  // Font Style (unknown function).
  string style = 4;

  // Different flags for font display that can be combined together.
  enum FontFlags {
    // No font flags.
    FONT_FLAGS_UNSPECIFIED = 0;
    // Make the text appear thicker.
    FONT_FLAGS_BOLD = 1;
    // Make the text appear cursive.
    FONT_FLAGS_ITALIC = 2;
    // Underline the text with a straight line.
    FONT_FLAGS_UNDERLINE = 4;
    // Strikeout the text.
    FONT_FLAGS_STRIKEOUT = 8;
  }
}

// Monitoring type for audio outputs.
enum MonitorType {
  // No value specified.
  MONITOR_TYPE_UNSPECIFIED = 0;
  // No monitoring.
  MONITOR_TYPE_NONE = 1;
  // Only monitor but don't output any sounds.
  MONITOR_TYPE_MONITOR_ONLY = 2;
  // Mintor the audio and output it at the same time.
  MONITOR_TYPE_MONITOR_AND_OUTPUT = 3;
}
