syntax = "proto3";

package obs_remote.legacy.recording;

import "common.proto";
import "google/protobuf/empty.proto";

// API functions related to recording.
service Recording {
  // Get current recording status.
  rpc Status(google.protobuf.Empty)
      returns (StatusReply);
  // Toggle recording on or off (depending on the current recording state).
  rpc Toggle(google.protobuf.Empty) returns (google.protobuf.Empty);
  // Start recording. Will return an `error` if recording is already active.
  rpc Start(google.protobuf.Empty) returns (google.protobuf.Empty);
  // Stop recording. Will return an `error` if recording is not active.
  rpc Stop(google.protobuf.Empty) returns (google.protobuf.Empty);
  // Pause the current recording. Returns an `error` if recording is not active
  // or already paused.
  rpc Pause(google.protobuf.Empty) returns (google.protobuf.Empty);
  // Resume/unpause the current recording (if paused). Returns an error if
  // recording is not active or not paused.
  rpc Resume(google.protobuf.Empty) returns (google.protobuf.Empty);
  // Please note: if this is called while a recording is in progress, the change
  // won't be applied immediately and will be effective on the next recording.
  rpc SetRecordingFolder(SetRecordingFolderRequest)
      returns (google.protobuf.Empty);
  // Get the path of the current recording folder.
  rpc GetRecordingFolder(google.protobuf.Empty)
      returns (GetRecordingFolderReply);
}

message StatusReply {
  // Current recording status.
  bool is_recording = 1;
  // Whether the recording is paused or not.
  bool is_recording_paused = 2;
  // Time elapsed since recording started (only present if currently recording).
  common.Timecode record_timecode = 3;
  // Absolute path to the recording file (only present if currently recording).
  string recording_filename = 4;
}

message SetRecordingFolderRequest {
  // Path of the recording folder.
  string rec_folder = 1;
}

message GetRecordingFolderReply {
  // Path of the recording folder.
  string rec_folder = 1;
}
