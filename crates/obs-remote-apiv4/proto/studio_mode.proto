syntax = "proto3";

package obs_remote.studio_mode;

import "common.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

// API functions related to the studio mode.
service StudioMode {
  rpc Status(google.protobuf.Empty) returns (StatusReply);
  // Get the name of the currently previewed scene and its list of sources. Will
  // return an `error` if Studio Mode is not enabled.
  rpc GetPreviewScene(google.protobuf.Empty) returns (GetPreviewSceneReply);
  // Set the active preview scene. Will return an `error` if Studio Mode is not
  // enabled.
  rpc SetPreviewScene(SetPreviewSceneRequest) returns (google.protobuf.Empty);
  // Transitions the currently previewed scene to the main output. Will return
  // an `error` if  Studio Mode is not enabled.
  rpc TransitionToProgram(TransitionToProgramRequest)
      returns (google.protobuf.Empty);
  // Enables Studio Mode.
  rpc Enable(google.protobuf.Empty) returns (google.protobuf.Empty);
  // Disables Studio Mode.
  rpc Disable(google.protobuf.Empty) returns (google.protobuf.Empty);
  // Toggles Studio Mode (depending on the current state of studio mode).
  rpc Toggle(google.protobuf.Empty) returns (google.protobuf.Empty);
}

message StatusReply {
  // Indicates if Studio Mode is enabled.
  bool active = 1;
}

message GetPreviewSceneReply {
  // The name of the active preview scene.
  string name = 1;
  // Array of scene items of the active preview scene.
  repeated common.SceneItem sources = 2;
}

message SetPreviewSceneRequest {
  // The name of the scene to preview.
  string scene_name = 1;
}

message TransitionToProgramRequest {
  // Change the active transition before switching scenes. Defaults to the
  // active transition.
  Transition with_transition = 1;

  message Transition {
    // Name of the transition.
    google.protobuf.StringValue name = 1;
    // Transition duration (in milliseconds).
    google.protobuf.UInt32Value duration = 2;
  }
}
