syntax = "proto3";

package obs_remote.common;

import "google/protobuf/wrappers.proto";

// Alignment for different items on the scene that is described in two axis. The
// default is center for both axis.
//
// For example, only using `LEFT` would arrange the target to the left
// horzontally and centered vertically. To align to the top right, the
// alignments can be combined to `LEFT | TOP`. Combining both values for a
// single axis is invalid, like `LEFT | RIGHT`.
message Alignment {
  // Raw flags value.
  uint32 raw = 1;
  // Align to the left side.
  bool left = 3;
  // Align to the right side.
  bool right = 4;
  // Align to the top.
  bool top = 5;
  // Align to the bottom.
  bool bottom = 6;
}

enum MediaState {
  // No value specified.
  MEDIA_STATE_UNSPECIFIED = 0;
  // No state.
  MEDIA_STATE_NONE = 1;
  // Media is playing.
  MEDIA_STATE_PLAYING = 2;
  // Opening file for replay.
  MEDIA_STATE_OPENING = 3;
  // Buffering data for replay.
  MEDIA_STATE_BUFFERING = 4;
  // Media is paused.
  MEDIA_STATE_PAUSED = 5;
  // Media stopped.
  MEDIA_STATE_STOPPED = 6;
  // All media in the playlist played.
  MEDIA_STATE_ENDED = 7;
  // Error occurred while trying to play the media.
  MEDIA_STATE_ERROR = 8;
  // Unknown state.
  MEDIA_STATE_UNKNOWN_STATE = 255;
}

message SceneItem {
  float cy = 1;
  float cx = 2;
  // The point on the source that the item is manipulated from. The sum of
  // 1=Left or 2=Right, and 4=Top or 8=Bottom, or omit to center on that axis.
  common.Alignment alignment = 3;
  // The name of this scene item.
  string name = 4;
  // Scene item ID.
  int64 id = 5;
  // Whether or not this Scene Item is set to "visible".
  bool render = 6;
  // Whether or not this Scene Item is muted.
  bool muted = 7;
  // Whether or not this Scene Item is locked and can't be moved around
  bool locked = 8;
  uint32 source_cx = 9;
  uint32 source_cy = 10;
  // Source type.
  SourceType ty = 11;
  float volume = 12;
  float x = 13;
  float y = 14;
  // Name of the item's parent (if this item belongs to a group).
  google.protobuf.StringValue parent_group_name = 15;
  // List of children (if this item is a group).
  repeated SceneItem group_children = 16;
}

message Timecode {
  uint32 hours = 1;
  uint32 minutes = 2;
  uint32 seconds = 3;
  uint32 milliseconds = 4;
}

enum SourceType {
  // No value specified.
  SOURCE_TYPE_UNSPECIFIED = 0;
  // Unknown source type.
  SOURCE_TYPE_UNKNOWN = 1;
  // Input source from outside of OBS.
  SOURCE_TYPE_INPUT = 2;
  // Filter applied to other items.
  SOURCE_TYPE_FILTER = 3;
  // Transition when switching scenes.
  SOURCE_TYPE_TRANSITION = 4;
  // Another scene added as source.
  SOURCE_TYPE_SCENE = 5;
}

message SceneItemTransform {
  // Position of the scene item.
  Position position = 1;
  // The clockwise rotation of the scene item in degrees around the point of
  // alignment.
  double rotation = 2;
  // Scaling factor of the scene item.
  Scale scale = 3;
  // Pixel cropping of the scene item before scaling.
  Crop crop = 4;
  // If the scene item is visible.
  bool visible = 5;
  // If the scene item is locked in position.
  bool locked = 6;
  // Bounding box of the source item.
  Bounds bounds = 7;
  // Base width (without scaling) of the source.
  uint64 source_width = 8;
  // Base source (without scaling) of the source.
  uint64 source_height = 9;
  // Scene item width (base source width multiplied by the horizontal scaling
  // factor).
  double width = 10;
  // Scene item height (base source height multiplied by the vertical scaling
  // factor).
  double height = 11;
  // Name of the item's parent (if this item belongs to a group).
  string parent_group_name = 12;
  // List of children (if this item is a group).
  repeated SceneItemTransform group_children = 13;
}

message Position {
  // The x position of the source from the left.
  double x = 1;
  // The y position of the source from the top.
  double y = 2;
  // The point on the source that the item is manipulated from. The sum of
  // 1=Left or 2=Right, and 4=Top or 8=Bottom, or omit to center on that axis.
  common.Alignment alignment = 3;
}

message Scale {
  // The x-scale factor of the source.
  double x = 1;
  // The y-scale factor of the source.
  double y = 2;
  // The scale filter of the source.
  Filter filter = 3;

  enum Filter {
    FILTER_UNSPECIFIED = 0;
    FILTER_DISABLED = 1;
    FILTER_POINT = 2;
    FILTER_BICUBIC = 3;
    FILTER_BILINEAR = 4;
    FILTER_LANCZOS = 5;
    FILTER_AREA = 6;
  }
}

message Crop {
  // The number of pixels cropped off the top of the source before scaling.
  uint32 top = 1;
  // The number of pixels cropped off the right of the source before scaling.
  uint32 right = 2;
  // The number of pixels cropped off the bottom of the source before scaling.
  uint32 bottom = 3;
  // The number of pixels cropped off the left of the source before scaling.
  uint32 left = 4;
}

message Bounds {
  // Type of bounding box.
  BoundsType ty = 1;
  // Alignment of the bounding box.
  common.Alignment alignment = 2;
  // Width of the bounding box.
  double x = 3;
  // Height of the bounding box.
  double y = 4;

  // Different kinds of bounds that can be applied to different items on the
  // scene.
  enum BoundsType {
    // No value specified.
    BOUNDS_TYPE_UNSPECIFIED = 0;
    // Stretch to bounds.
    BOUNDS_TYPE_STRETCH = 1;
    // Scale to inner bounds.
    BOUNDS_TYPE_SCALE_INNER = 2;
    // Scale to outer bounds.
    BOUNDS_TYPE_SCALE_OUTER = 3;
    // Scale to width of bounds.
    BOUNDS_TYPE_SCALE_TO_WIDTH = 4;
    // Scale to height of bounds.
    BOUNDS_TYPE_SCALE_TO_HEIGHT = 5;
    // Maximum size only.
    BOUNDS_TYPE_MAX_ONLY = 6;
    // No bounds.
    BOUNDS_TYPE_NONE = 7;
  }
}
